  
  if (!createDevice(1, DEVICE_TYPE_DIGITAL_OUTPUT, 8)) {
    error = true;
    Serial.println("Aet bajs");
  }
  
  createDevice(42, DEVICE_TYPE_DIGITAL_INPUT, 2);
 
 createDevice(40, DEVICE_TYPE_ANALOGUE_INPUT, A0);
 

int servo_created = false;
int r = true;
void loop() {
  
  
  Device *lamp = getDevice(1);
  Device *button = getDevice(42);
  int val = getValue(button);
  if (val == LOW) {
    
    setValue(lamp,1);
    if (!servo_created) {
    
       createDevice(9, DEVICE_TYPE_SERVO, 11);
       servo_created = true;
    }
    
  } else {
  
    setValue(lamp,0);
  }
 
 Device *sun = getDevice(40);
 //Serial.println(getValue(sun));
 
  if (servo_created && val == LOW) {
 
    Device *servo = getDevice(9);   
    setValue(servo, (getValue(sun) - 300) / 3);
    
  }
  
  delay(100);
  r = !r;

}






















------------------- DEBUG: -------------------------
#ifdef RH24_DEBUG

uint32_t displayTimer = 0;
RequestPackage payload;
bool initialize_sent = false;
bool initialize_ok = false;
int msgCount = 0;
int createdDeviceId = -1;

void rh_debug_host();

#endif



// -------------------- DEBUG -------------------

#ifdef RH24_DEBUG

void rh_debug_host() {

   if (millis() - displayTimer > 5000) {

    displayTimer = millis();
    
    R2_LOG(F("TEST: Will send when ready."));
    
    for (int i = 0; i < mesh.addrListTop; i++) {

      R2_LOG(F("TEST: Will address this node:"));
      R2_LOG(mesh.addrList[i].nodeID);
      RF24NetworkHeader header(mesh.addrList[i].address, OCT); //Constructing a header
      
      waitingForResponse[mesh.addrList[i].nodeID] = true;
      
      payload.host = mesh.addrList[i].nodeID;
      
      if (!initialize_sent) {
        
        R2_LOG("TEST: initialize");
        initialize_sent = true;
        payload.action = ACTION_INITIALIZE;
        
      } else if (initialize_sent && createdDeviceId == -1) {
        
        R2_LOG(F("TEST: create device"));
        payload.action = ACTION_CREATE_DEVICE;
        payload.args[REQUEST_ARG_CREATE_TYPE_POSITION] = DEVICE_TYPE_ANALOGUE_INPUT;
        payload.args[REQUEST_ARG_CREATE_PORT_POSITION] = A0;//0x2;
        
      } else {
      
          R2_LOG(F("TEST: get device"));
          payload.action = ACTION_GET_DEVICE;
          payload.id = createdDeviceId;
          
      }
      
      if (network.write(header, &payload, sizeof(RequestPackage))) { R2_LOG(F("Send OK")); }
      else {
        R2_LOG(F("Send Fail"));
        createdDeviceId = -1;
        initialize_sent = false;
        initialize_ok = false;
        return;
      }
      
      waitForResponseFrom(mesh.addrList[i].nodeID);
      
      if (initialize_sent && !initialize_ok) {
      
        if (lastResponse.action != ACTION_INITIALIZATION_OK) { 
            R2_LOG(F("TEST: Initialize failed."));
            R2_LOG(F("Got action:"));
            R2_LOG(lastResponse.action);
            initialize_sent = false;
            createdDeviceId = -1;
       } else {
           initialize_ok = true; 
         R2_LOG(F("TEST: Initialize ok.")); 
       }
      
      } else if (lastResponse.action == ACTION_CREATE_DEVICE) {
          
         createdDeviceId = lastResponse.id;
         R2_LOG(F("TEST: Created device width id:"));
         R2_LOG(createdDeviceId);
        
      } else if (lastResponse.action == ACTION_GET_DEVICE) {
      
        R2_LOG(F("TEST: Got new value:"));
        R2_LOG(lastResponse.content[0] + (lastResponse.content[1] << 8));
        
      } else {
      
        R2_LOG(F("TEST ERROR: Got bad response with action/code"));
        R2_LOG(lastResponse.action);
        R2_LOG(lastResponse.content[0]);
        createdDeviceId = -1;
        initialize_sent = false;
        initialize_ok = false;
        
      }
      
      msgCount++;
   
    }
      
  }
  
}

#endif

