<#@ template language="C#" hostspecific="true"  debug="True"  #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Xml" #>
<#@ include file="Shared.tt" #>
<#

string[] config = GetConfig(baseConfigFileName);
string baseConfigFileNameIncludingExtension = baseConfigFileName + ".config";

if (config.Length == 2) {
string configFullPath = config[CFILE];
string baseDir = config[CPATH];

Console.WriteLine("Configuring using file: " + configFullPath + " and configuration base path: " + baseDir);

XmlDocument doc = GetConfigXml(config[1]);

#>

using System;
using System.IO;
using System.Xml;
using System.Collections.Generic;
using R2Core.Device;

namespace R2Core
{
	public class Settings : DeviceBase {

		public static readonly string SETTINGS_DEVICE_ID = "settings";
		private string m_basePath;
		private static Settings m_instance;

		private static readonly object m_lock = new object();

		private Dictionary<string,dynamic> m_constants;
		private static readonly object m_instanceLock = new object();
		private static readonly object m_dataLoadLock = new object();
		private IList<string> m_dataLoaded;

		private Settings() : base(SETTINGS_DEVICE_ID) {
			ReloadConstants();
		}

		/// <summary>
		///	Compile time generated Path information.
		/// </summary>
		public readonly ConstsClass C = new ConstsClass();

		/// <summary>
		///	Compile time generated Path information.
		/// </summary>
		public static ConstsClass Consts { get {
			return Settings.Instance.C;
		}}

		/// <summary>
		///	Compile time generated Path information.
		/// </summary>
		public readonly PathsClass P = new PathsClass();

		/// <summary>
		///	Compile time generated Path information.
		/// </summary>
		public static PathsClass Paths { get {
			return Settings.Instance.P;
		}}

		/// <summary>
		///	Compile time generated IDevice identifiers.
		/// </summary>
		public readonly IdentifiersClass I = new IdentifiersClass();

		/// <summary>
		///	Compile time generated IDevice identifiers.
		/// </summary>
		public static IdentifiersClass Identifiers { get {
			return Settings.Instance.I;
		}}
	
		/// <summary>
		/// Sets the base path for the r2 project. If not set, the settings will try to find <#=baseConfigFileNameIncludingExtension#> to determine the r2 project location.
		/// </summary>
		public static void SetBasePath(string basePath) {
			
			Settings.Instance.m_basePath = basePath;

		}

		/// <summary>
		///	Application base path. Traversing directories and looking for "<#=baseConfigFileNameIncludingExtension#>" to locate application root.
		/// </summary>
		public static string BasePath {
			get {

				lock(m_lock) {

					if (Settings.Instance.m_basePath == null) {

						Settings.Instance.m_basePath = System.IO.Directory.GetCurrentDirectory();
						string configFullPath = "";

						// 20 is the Maximum number of directories to travers in order to find "Core.config" file.

						for (int i = 0; i < 20; i++) {

							configFullPath = Settings.Instance.m_basePath + System.IO.Path.DirectorySeparatorChar + "<#=baseConfigFileNameIncludingExtension#>";

							if (System.IO.File.Exists(configFullPath)) {
								break;
							} else {
								Settings.Instance.m_basePath =  System.IO.Directory.GetParent(Settings.Instance.m_basePath).FullName;
							}

						}
					}
				}

				return m_instance.m_basePath;
			}
		}

		/// <summary>
		/// Returns a static instance of the settings. Creates an instance if needed.
		/// </summary>
		/// <value>The instance.</value>
		public static Settings Instance {
			get {
				lock(m_instanceLock) {
					if (Settings.m_instance == null) {
						Settings.m_instance = new Settings();
					}

					return m_instance;
				}
			}
		}


		/// <summary>
		/// Resets configuration settings for constants and forces them to be reloaded(lazily).
		/// </summary>
		public void ReloadConstants() {
			m_constants = new Dictionary<string,dynamic>();
			m_dataLoaded = new List<string>();
		}

		/// <summary>
		/// Adds a value to the Const dictionary.
		/// </summary>
		/// <param name="key">Key.</param>
		/// <param name="value">Value.</param>
		protected void AddConstant(string key, dynamic value) {

			key = key.ToLower();

			if (m_constants.ContainsKey(key)) {
				//TODO: print error
			} else {

				m_constants.Add(key, value);
			}

		}

		/// <summary>
		/// Checks if the data for key have been loaded and loads the data at runtime if required.
		/// </summary>
		/// <param name="key">Key.</param>
		/// <param name="configFileName">Config file name.</param>
		public void CheckAndLoadData(string key, string configFileName) {

			lock(m_dataLoadLock) {

				if (!Settings.Instance.m_dataLoaded.Contains(key)) {
					Settings.LoadConstData(configFileName);

					Settings.Instance.m_dataLoaded.Add(key);
				}
			}
		}

		/// <summary>
		/// Returns a value of a dynamic type.
		/// </summary>
		/// <returns>The value.</returns>
		/// <param name="key">Key.</param>
		public dynamic Val(string key) {

			key = key.ToLower();
			if (Settings.Instance.m_constants.ContainsKey(key)) {
				return Settings.Instance.m_constants [key];
			}

			throw new ApplicationException("Value not found in Settings: " + key);

		}

		/// <summary>
		/// Returns a value of type T using key or the default value for T
		/// </summary>
		/// <returns>The value.</returns>
		/// <param name="key">Key.</param>
		/// <typeparam name="T">The 1st type parameter.</typeparam>
		public T GetValue<T>(string key) {

			key = key.ToLower();

			if (Settings.Instance.m_constants.ContainsKey(key)) {
				return(T) Settings.Instance.m_constants [key];
			}

			return default(T);

		} 

		/// <summary>
		/// Returns a value of type T using key or the default value for T
		/// </summary>
		/// <returns>The value.</returns>
		/// <param name="key">Key.</param>
		/// <typeparam name="T">The 1st type parameter.</typeparam>
		public void SetValue<T>(string key, T newValue) {

			key = key.ToLower();
			Settings.Instance.m_constants[key] = newValue;

		} 

		/// <summary>
		/// Loads and returns an XmlDocument.
		/// </summary>
		/// <returns>The config xml.</returns>
		/// <param name="file">File.</param>
		private static XmlDocument GetConfigXml(string file) {

			XmlDocument doc = new XmlDocument();
			doc.PreserveWhitespace = false;
			try { doc.Load(file); }
			catch (System.IO.FileNotFoundException)
			{}

			return doc;
		}

		/// <summary>
		/// Loads configuration file data from parameter
		/// </summary>
		/// <param name="configFileName">Config file name.</param>
		public static void LoadConstData(string configFileName) {

			string fileName = Settings.BasePath + configFileName;

			foreach (XmlNode pathsNode in GetConfigXml(fileName).SelectNodes("/Configuration/Consts")) {
				foreach (XmlNode node in pathsNode.ChildNodes) { 
					if (!((node.Attributes["ignore"] != null && node.Attributes["ignore"].Value == "true"))) {

						Settings.Instance.AddConstant(node.Name, node.Attributes["type"] != null ? ParseType(node.Attributes["type"].Value, node.InnerText) : node.InnerText  );
					}
				}

			}
		}

		/// <summary>
		/// Returns a dynamic parsing of value using description as type identifier.
		/// </summary>
		/// <returns>The type.</returns>
		/// <param name="description">Description.</param>
		/// <param name="value">Value.</param>
		public static dynamic ParseType(string description, string value) {
			switch (description) {
			case "int":
				return int.Parse(value);
			default:
				return typeof(string);
			}
		}

<#= GetPathsForDoc(baseConfigFileName, doc, baseDir) #>

<#= GetIdentifiersForDoc(baseConfigFileName, doc) #>

<#= GetConstsForDoc(baseConfigFileName, StripBasePath(baseDir, configFullPath), doc) #>

	}
}

	<#
} else {

	throw new ApplicationException("Unable to locate configuration file '" + baseConfigFileNameIncludingExtension + "'. The file must be located in parent directory.");

}
	#>