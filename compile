#!/bin/bash

# Use this script to compile project file from command line in Unix-like systems.
# Usage:
# $ ./compile.sh <project name> [-s]
#
# Example: ./compile.sh MainFrame
# if -s is set, the template compilation is ignored

cwd=$(pwd)
usage_message="./compile.sh <project name> [[--t4] [--project-dir <path>] [--packages] | [--clean] | [--help]]"

T4_compiler_path="/usr/local/bin/Mono.TextTransform.1.0.0/tools/TextTransform.exe"
nuget_path="/usr/local/bin/nuget.exe"

if [ "$#" -eq 0 ]; then
    echo "$(tput setaf 1)Error: Illegal parameters.$(tput sgr 0)"
    echo "Usage: $usage_message"
    exit 1
fi

for var in "$@"
do
	if [ $var == "--help" ]; then
		echo "Usage:
	$usage_message

Options:
	--t4			Compile T4 template files
	--packages		Install Nuget packages
	--project-dir <path>	Specify the path to the project
	--clean			Clean project and remove Nuget packages
	--help			Show this message

Example:
	$ ./compile.sh MyProject --t4 --packages
	"
		exit 0
	fi

done

# The directory where implementations are located
implementation_path="$cwd/.."

for (( i=2; i <= "$#"; i++ )); do
	if [ ${!i} == "--project-dir" ]; then
		implementations_index=$((i+1)) 
		if [ -z ${!implementations_index} ]; then
			echo "$(tput setaf 1)Error: No implementation path for parameter -p specified$(tput sgr 0)"
			exit 1
		fi
		implementation_path="$cwd/../${!implementations_index}"
	fi
done

if [ ! -d $implementation_path ]; then
    echo "$(tput setaf 1)Error: Project path '$implementation_path' not found.$(tput sgr 0)"
    exit 1
fi

echo "Using implementation base path: $implementation_path"

core_configuration_path="Src/Core/Settings"
T4_compiler_command="$T4_compiler_path -I $core_configuration_path"
dir_core="$cwd/Src/Core"
dir_audio="$cwd/Src/Audio"
dir_video="$cwd/Src/Video"
dir_scripting="$cwd/Src/Scripting"
dir_push="$cwd/Src/PushNotifications"
dir_gpio="$cwd/Src/GPIO"
dir_common="$cwd/Src/Common"

core_configuration_template="$cwd/$core_configuration_path/CoreConfigurationTemplate.tt"
core_configuration_output="$cwd/$core_configuration_path/CoreConfigurationTemplate.cs"
audio_configuration_template="$dir_audio/AudioConfigurationTemplate.tt"
audio_configuration_output="$dir_audio/AudioConfigurationTemplate.cs"
video_configuration_template="$dir_video/VideoConfigurationTemplate.tt"
video_configuration_output="$dir_video/VideoConfigurationTemplate.cs"
gpio_configuration_template="$dir_gpio/GPIOConfigurationTemplate.tt"
gpio_configuration_output="$dir_gpio/GPIOConfigurationTemplate.cs"
common_configuration_template="$dir_common/CommonConfigurationTemplate.tt"
common_configuration_output="$dir_common/CommonConfigurationTemplate.cs"
script_configuration_template="$dir_scripting/ScriptingConfigurationTemplate.tt"
script_configuration_output="$dir_scripting/ScriptingConfigurationTemplate.cs"
push_configuration_template="$dir_push/PushNotificationsConfigurationTemplate.tt"
push_configuration_output="$dir_push/PushNotificationsConfigurationTemplate.cs"

project_file="$implementation_path/$1/$1.sln"

package_output_dir="$implementation_path/$1/packages"

if [ ! -f $project_file ]; then
    echo "$(tput setaf 1)Error: Project file: $project_file does not exist.$(tput sgr 0)"
    exit 1
fi

function compileT4 {

	echo "Compiling T4 template '$1'..."
	eval "$T4_compiler_command $1 -o $2"

	if [ ! $? -eq 0 ];
	then
        	echo "$(tput setaf 1)Error: Unable to compile T4 template '$1'.$(tput sgr 0)"
        	exit 1
	fi

}

for var in "$@"
do
	if [ $var == "--t4" ]; then
		compile_t4=true
	elif [ $var == "--packages" ]; then
		update_packages=true
	elif [ $var == "--clean" ]; then
		msbuild "$project_file" -target:Clean
		echo "$(tput bold)Removing packages:$(tput sgr 0) $package_output_dir/*"
		eval "rm -r $package_output_dir/*"
		exit 0
	fi
done

if test "$compile_t4" = true; then

	echo "$(tput bold)--Compiling T4 templates--$(tput sgr 0)"

	if [ ! -f $T4_compiler_path ]; then
	    echo "$(tput setaf 1)Error: T4 compiler not found at '$T4_compiler_path'.$(tput sgr 0)" 
	    echo "Install monodevelop. (i.e. apt-get install monodevelop in Debian/Ubuntu)."
	    exit 1
	fi

	project_template_file="$implementation_path/$1/$1/$1ConfigurationTemplate.tt" # Project template file named <project name>ConfigurationTemplate.tt
	
	if [ -f $project_template_file ]; then
	    compileT4 $project_template_file $implementation_path/$1/$1/$1ConfigurationTemplate.cs
	else
		echo "$(tput setaf 3)No template file found for project '$project_file': '$project_template_file' $(tput sgr 0)" 
	fi

	compileT4 $core_configuration_template $core_configuration_output
	compileT4 $common_configuration_template $common_configuration_output
	compileT4 $script_configuration_template $script_configuration_output
	compileT4 $audio_configuration_template $audio_configuration_output
	compileT4 $video_configuration_template $video_configuration_output
	compileT4 $gpio_configuration_template $gpio_configuration_output
	compileT4 $push_configuration_template $push_configuration_output

fi

if test "$update_packages" = true; then
	if [ ! -f $nuget_path ]; then
		echo "$(tput setaf 1)Error: Nuget package manager not found at: $nuget_path$(tput sgr 0)"
		echo "Download it by typing"
		echo "sudo curl -o $nuget_path https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
	    exit 1
	fi

	package_paths=($dir_core $dir_audio $dir_video $dir_scripting $dir_common $dir_gpio $dir_push)

	echo "$(tput bold)--Installing packages--$(tput sgr 0)"

	for pidx in "${!package_paths[@]}"; do
		package_path=${package_paths[$pidx]}
		package_dir="$package_path/packages.config"
		if [ -f $package_dir ]; then
			echo "mono $nuget_path install $package_dir  -OutputDirectory $package_output_dir"
			mono "$nuget_path" install "$package_dir" -OutputDirectory "$package_output_dir" -Verbosity detailed || exit 1
		fi
	done
fi

if [ $? -eq 0 ];
then
touch "$cwd/$core_configuration_path/Shared.cs"
msbuild "$project_file"

fi

